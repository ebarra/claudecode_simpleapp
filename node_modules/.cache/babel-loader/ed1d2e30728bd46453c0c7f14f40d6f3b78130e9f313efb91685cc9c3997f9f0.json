{"ast":null,"code":"var _jsxFileName = \"/home/ebarra/trabajo/claudecode/test1/src/components/TimerSection.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport './TimerSection.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TimerSection({\n  title,\n  buttonText,\n  isActive,\n  onStart,\n  onStop,\n  accumulatedTime,\n  updateAccumulatedTime,\n  mode,\n  disabled\n}) {\n  _s();\n  const timerRef = useRef(null);\n  useEffect(() => {\n    if (isActive) {\n      // Set up interval to update time\n      timerRef.current = setInterval(() => {\n        if (mode === 'earn') {\n          // Add a second when earning\n          updateAccumulatedTime(accumulatedTime + 1);\n        } else if (mode === 'spend') {\n          // Subtract a second when spending\n          const newTime = accumulatedTime - 1;\n          updateAccumulatedTime(newTime);\n\n          // Stop timer if time runs out\n          if (newTime <= 0) {\n            onStop();\n          }\n        }\n      }, 1000);\n    } else if (timerRef.current) {\n      // Clear interval when not active\n      clearInterval(timerRef.current);\n    }\n\n    // Clean up interval on unmount or when active state changes\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, [isActive, accumulatedTime, mode, updateAccumulatedTime, onStop]);\n  const handleButtonClick = () => {\n    if (isActive) {\n      onStop();\n    } else {\n      onStart();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `timer-section ${mode}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"timer-button\",\n      onClick: handleButtonClick,\n      disabled: disabled && !isActive,\n      children: buttonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(TimerSection, \"/gPr91I23C5MYSmlVUbYA7l794U=\");\n_c = TimerSection;\nexport default TimerSection;\nvar _c;\n$RefreshReg$(_c, \"TimerSection\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","TimerSection","title","buttonText","isActive","onStart","onStop","accumulatedTime","updateAccumulatedTime","mode","disabled","_s","timerRef","current","setInterval","newTime","clearInterval","handleButtonClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/ebarra/trabajo/claudecode/test1/src/components/TimerSection.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport './TimerSection.css';\n\nfunction TimerSection({\n  title,\n  buttonText,\n  isActive,\n  onStart,\n  onStop,\n  accumulatedTime,\n  updateAccumulatedTime,\n  mode,\n  disabled\n}) {\n  const timerRef = useRef(null);\n  \n  useEffect(() => {\n    if (isActive) {\n      // Set up interval to update time\n      timerRef.current = setInterval(() => {\n        if (mode === 'earn') {\n          // Add a second when earning\n          updateAccumulatedTime(accumulatedTime + 1);\n        } else if (mode === 'spend') {\n          // Subtract a second when spending\n          const newTime = accumulatedTime - 1;\n          updateAccumulatedTime(newTime);\n          \n          // Stop timer if time runs out\n          if (newTime <= 0) {\n            onStop();\n          }\n        }\n      }, 1000);\n    } else if (timerRef.current) {\n      // Clear interval when not active\n      clearInterval(timerRef.current);\n    }\n    \n    // Clean up interval on unmount or when active state changes\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, [isActive, accumulatedTime, mode, updateAccumulatedTime, onStop]);\n  \n  const handleButtonClick = () => {\n    if (isActive) {\n      onStop();\n    } else {\n      onStart();\n    }\n  };\n  \n  return (\n    <div className={`timer-section ${mode}`}>\n      <h2>{title}</h2>\n      <button \n        className=\"timer-button\"\n        onClick={handleButtonClick}\n        disabled={disabled && !isActive}\n      >\n        {buttonText}\n      </button>\n    </div>\n  );\n}\n\nexport default TimerSection;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,SAASC,YAAYA,CAAC;EACpBC,KAAK;EACLC,UAAU;EACVC,QAAQ;EACRC,OAAO;EACPC,MAAM;EACNC,eAAe;EACfC,qBAAqB;EACrBC,IAAI;EACJC;AACF,CAAC,EAAE;EAAAC,EAAA;EACD,MAAMC,QAAQ,GAAGd,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd,IAAIO,QAAQ,EAAE;MACZ;MACAQ,QAAQ,CAACC,OAAO,GAAGC,WAAW,CAAC,MAAM;QACnC,IAAIL,IAAI,KAAK,MAAM,EAAE;UACnB;UACAD,qBAAqB,CAACD,eAAe,GAAG,CAAC,CAAC;QAC5C,CAAC,MAAM,IAAIE,IAAI,KAAK,OAAO,EAAE;UAC3B;UACA,MAAMM,OAAO,GAAGR,eAAe,GAAG,CAAC;UACnCC,qBAAqB,CAACO,OAAO,CAAC;;UAE9B;UACA,IAAIA,OAAO,IAAI,CAAC,EAAE;YAChBT,MAAM,CAAC,CAAC;UACV;QACF;MACF,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,MAAM,IAAIM,QAAQ,CAACC,OAAO,EAAE;MAC3B;MACAG,aAAa,CAACJ,QAAQ,CAACC,OAAO,CAAC;IACjC;;IAEA;IACA,OAAO,MAAM;MACX,IAAID,QAAQ,CAACC,OAAO,EAAE;QACpBG,aAAa,CAACJ,QAAQ,CAACC,OAAO,CAAC;MACjC;IACF,CAAC;EACH,CAAC,EAAE,CAACT,QAAQ,EAAEG,eAAe,EAAEE,IAAI,EAAED,qBAAqB,EAAEF,MAAM,CAAC,CAAC;EAEpE,MAAMW,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAIb,QAAQ,EAAE;MACZE,MAAM,CAAC,CAAC;IACV,CAAC,MAAM;MACLD,OAAO,CAAC,CAAC;IACX;EACF,CAAC;EAED,oBACEL,OAAA;IAAKkB,SAAS,EAAE,iBAAiBT,IAAI,EAAG;IAAAU,QAAA,gBACtCnB,OAAA;MAAAmB,QAAA,EAAKjB;IAAK;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAChBvB,OAAA;MACEkB,SAAS,EAAC,cAAc;MACxBM,OAAO,EAAEP,iBAAkB;MAC3BP,QAAQ,EAAEA,QAAQ,IAAI,CAACN,QAAS;MAAAe,QAAA,EAE/BhB;IAAU;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACZ,EAAA,CAhEQV,YAAY;AAAAwB,EAAA,GAAZxB,YAAY;AAkErB,eAAeA,YAAY;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}